package nl.han.asd.project.client.commonclient.database;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.sql.*;

/**
 *
 *
 * @author Niels Bokmans
 * @version 1.0
 * @since 20-5-2016
 */
public class DatabaseConnection {

    private Connection connection;

    private static final Logger LOGGER = LoggerFactory.getLogger(DatabaseConnection.class);
    private static final String DATABASE_ENCRYPTION_ALGORITHM = "SHA-256";

    public DatabaseConnection(String username, String password) throws SQLException {
        connection = DriverManager.getConnection(
                "jdbc:hsqldb:" + username + "_db;crypt_key=" + generateKey(username, password) + ";crypt_type=AES",
                "sa", "e1Gu3vX7");
        initializeDatabase();
    }

    public void resetDatabase() throws SQLException {
        executeQuery("DROP TABLE IF EXISTS Contact");
        executeQuery("DROP TABLE IF EXISTS Message");
        initializeDatabase();
    }

    private void initializeDatabase() throws SQLException {
        executeQuery(
                "CREATE TABLE IF NOT EXISTS Contact (id INTEGER GENERATED BY DEFAULT AS IDENTITY, username VARCHAR(256), PRIMARY KEY(username))");
        executeQuery(
                "CREATE TABLE IF NOT EXISTS Message (id INTEGER GENERATED BY DEFAULT AS IDENTITY, sender VARCHAR(256), message NVARCHAR(1024), timestamp DATETIME, PRIMARY KEY(sender, timestamp))");
    }

    public boolean executeQuery(String sqlQuery) throws SQLException {
        final Statement statement = connection.createStatement();
        int result = statement.executeUpdate(sqlQuery);
        statement.close();
        return result != -1;
    }

    public ResultSet select(String query) throws SQLException {
        final Statement statement = connection.createStatement();
        final ResultSet resultSet = statement.executeQuery(query);
        statement.close();
        return resultSet;
    }

    public void stop() throws SQLException {
        final Statement statement = connection.createStatement();
        statement.execute("SHUTDOWN");
        statement.close();
        connection.close();
    }

    public boolean isOpen() throws SQLException {
        return !connection.isClosed();
    }

    private String generateKey(String username, String password) {
        try {
            MessageDigest messageDigest = MessageDigest.getInstance(DATABASE_ENCRYPTION_ALGORITHM);
            return String.format("%064x",
                    new java.math.BigInteger(1, messageDigest.digest((username + password).getBytes())))
                    .substring(0, 32);
        } catch (NoSuchAlgorithmException e) {
            LOGGER.error(e.getMessage(), e);
        }
        return "";
    }
}
