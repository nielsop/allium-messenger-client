package nl.han.asd.project.client.commonclient.database;

import nl.han.asd.project.client.commonclient.Configuration;

import java.sql.*;

/**
 * HyperSQL Database implementation.
 *
 * @author Niels Bokmans
 * @version 1.0
 * @since 24-5-2016
 */
public class HyperSQLDatabase implements IDatabase {

    private Connection connection;

    private static final String DATABASE_USERNAME = "sa";
    private static final String DATABASE_PASSWORD = "e1Gu3vX7";

    /**
     * Creates a new HyperSQL Database connection. Creates the database if none exists for this user.
     * @param username The user's username.
     * @param password The user's password.
     * @throws SQLException if a database access error occurs.
     */
    public HyperSQLDatabase(String username, String password) throws SQLException {
        connection = DriverManager.getConnection(
                "jdbc:hsqldb:" + username + "_db;crypt_key=" + Configuration.generateKey(username, password)
                        + ";crypt_type=AES", DATABASE_USERNAME, DATABASE_PASSWORD);
        initializeDatabase();
    }

    @Override
    public boolean resetDatabase() throws SQLException {
        final boolean databaseIsReset = query("DROP TABLE IF EXISTS Contact") && query("DROP TABLE IF EXISTS Message");
        if (databaseIsReset) {
            initializeDatabase();
            return true;
        }
        return false;
    }

    @Override
    public void initializeDatabase() throws SQLException {
        query("CREATE TABLE IF NOT EXISTS Contact (id INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1), username VARCHAR(256), PRIMARY KEY(username))");
        query("CREATE TABLE IF NOT EXISTS Message (id INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1), sender VARCHAR(256), timestamp TIMESTAMP,  message NVARCHAR(1024), PRIMARY KEY(id))");
    }

    @Override
    public boolean query(final String sqlQuery) throws SQLException {
        if (!isOpen()) {
            return false;
        }
        final Statement statement = connection.createStatement();
        final int result = statement.executeUpdate(sqlQuery);
        statement.close();
        return result != -1;
    }

    @Override
    public ResultSet select(final String sqlQuery) throws SQLException {
        if (!isOpen()) {
            return null;
        }
        final Statement statement = connection.createStatement();
        final ResultSet resultSet = statement.executeQuery(sqlQuery);
        statement.close();
        return resultSet;
    }

    @Override
    public void stop() throws SQLException {
        if (!isOpen()) {
            return;
        }
        final Statement statement = connection.createStatement();
        statement.execute("SHUTDOWN");
        statement.close();
        connection.close();
    }

    @Override
    public boolean isOpen() throws SQLException {
        return connection != null && !connection.isClosed();
    }
}
