//
// Syntax for the proto file
//
syntax = "proto2";

//
// Java variables to allow access to the generated protocol class from different packages
//
option java_package = "nl.han.asd.project.protocol";
option java_outer_classname = "HanRoutingProtocol";

//
// Get graph
//

// Responded to with a GraphUpdateResponse, target is to recieve updates of the Graph
message GraphUpdateRequest {
	required int32 currentVersion = 1;
}

// Response to the GraphUpdateRequest, gives updates on the Graph or returns the whole Graph if the currentVersion is too old.
message GraphUpdateResponse {
	required int32 newVersion = 1; // Version of the new Graph, can be equal to the currentVersion of the GraphUpdateRequest
	required bool isFullGraph = 2;
	repeated Node addedNodes = 3;
	repeated Node updatedNodes = 4;
	repeated Node deletedNodes = 5;
}

message Node {
	required string id = 1;
	required string IPaddress = 2;
	required int32 port = 3;
	required string publicKey = 4;
	repeated Edge edge = 5;
}

message Edge {
	required string targetNodeId = 1;
	required float weight = 2;
}

//
// Node registration
//
message NodeRegisterRequest {
	required string IPaddress = 1;
	required int32 port = 2;
	required string publicKey = 3;
}

message NodeRegisterResponse {
// Possible states that can occur with this response
// SUCCES: Request succesfully processed.
// FAILED: Request failed to process.
// ALREADY_EXISTS: Node is already registered by the Master.
	enum Status {
		SUCCES = 1;
		FAILED = 2;
		ALREADY_EXISTS = 3;
	}

	required Status status = 1;
	optional string id = 2;
	optional string secretHash = 3; // Hash used to authenticate a Node at the Master
}

message NodeUpdateRequest {
	required string id = 1;
	required string secretHash = 2;
	optional string IPaddress = 3;
	optional int32 port = 4;
	optional string publicKey = 5;
}

message NodeUpdateResponse {
// Possible states that can occur with this response
// SUCCES: Request succesfully processed.
// FAILED: Request failed to process.
	enum Status {
		SUCCES = 1;
		FAILED = 2;
	}

	required Status status = 1;
}

message NodeDeleteRequest {
	required string id = 1;
	required string secretHash = 2;
}

message NodeDeleteResponse {
// Possible states that can occur with this response
// SUCCES: Request succesfully processed.
// FAILED: Request failed to process.
	enum Status {
		SUCCES = 1;
		FAILED = 2;
	}

	required Status status = 1;
}

//
// Get all clients
//
message ClientRequest {
	optional int32 clientGroup = 1;
}

message ClientResponse {
	repeated Client clients = 1;
}

message Client {
	required string username = 1; // has to be unique
	required string publicKey = 2;
	repeated Node connectedNodes = 3;
}

//
// Client heartbeat
//
message ClientHeartbeat {
	required string username = 1;
	required string secretHash = 2;
}

//
// Node heartbeat
//
message NodeHeartbeat {
	required string id = 1;
	required string secretHash = 2;
}

//
// Client register
//
message ClientRegisterRequest {
	required string username = 1;
	required string password = 2;
}

message ClientRegisterResponse {
// Possible states that can occur with this response
// SUCCES: Request succesfully processed.
// FAILED: Request failed to process.
// TAKEN_USERNAME: Username already in use.
	enum Status {
		SUCCES = 1;
		FAILED = 2;
		TAKEN_USERNAME = 3;
	}

	required int32 status = 1;
}

//
// Client login
//
message ClientLoginRequest {
	required string username = 1;
	required string password = 2;
	required string publicKey = 3;
}

message ClientLoginResponse {
// Possible states that can occur with this response
// SUCCES: Request succesfully processed.
// FAILED: Request failed to process.
// INVALID_COMBINATION: Username and password combination is invalid.
	enum Status {
		SUCCES = 1;
		FAILED = 2;
		INVALID_COMBINATION = 3;
	}

	required int32 status = 1;
	required string secretHash = 2;
	repeated Node connectedNodes = 3;
}

//
// Client logout
//
message ClientLogoutRequest {
	required string username = 1;
	required string secretHash = 2;
}

message ClientLogoutResponse {
// Possible states that can occur with this response
// SUCCES: Request succesfully processed.
// FAILED: Request failed to process.
	enum Status {
		SUCCES = 1;
		FAILED = 2;
	}

	required Status status = 1;
}

//
// Send message
//
message EncryptedMessage {
	optional string IPaddress = 1;
	optional int32 port = 2;
	optional string username = 3;
	required bytes encryptedData = 4; // This will contain either a new EncryptedMessage or a Message/MessageConfirmation after decryption
}

message Message {
	required string id = 1; // Unique, generated by Client
	required string text = 2;
	required string sender = 3;
}

message MessageConfirmation {
	required string confirmationId = 1;
}

//
// Establish connection between Client and Node
// As Client you send your username to the Nodes you are required to connect with, so they can send messages to you
//
message ClientNodeConnection {
	required string username = 1;
}

//
// Encryption wrapper for communication with the Master
//
message EncryptedWrapper {
    enum Type {
        GRAPHUPDATEREQUEST = 1;
        GRAPHUPDATERESPONSE = 2;

        NODEREGISTERREQUEST = 3;
        NODEREGISTERRESPONSE = 4;

        NODEUPDATEREQUEST = 5;
        NODEUPDATERESPONSE = 6;

        NODEDELETEREQUEST = 7;
        NODEDELETERESPONSE = 8;

        CLIENTREQUEST = 9;
        CLIENTRESPONSE = 10;

        CLIENTHEARTBEAT = 11;

        NODEHEARTBEAT = 12;

        CLIENTREGISTERREQUEST = 13;
        CLIENTREGISTERRESPONSE = 14;

        CLIENTLOGINREQUEST = 15;
        CLIENTLOGINRESPONSE = 16;

        CLIENTLOGOUTREQUEST = 17;
        CLIENTLOGOUTRESPONSE = 18;

        ENCRYPTEDMESSAGE = 19;

        MESSAGECONFIRMATION = 20;

        CLIENTNODECONNECTION = 21;
    }

    required Type type = 1;
	required string publicKey = 2;
	required bytes data = 3;
}